{"name": "test_search_functionality_004", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF78CBB5335+78597]\n\tGetHandleVerifier [0x00007FF78CBB5390+78688]\n\t(No symbol) [0x00007FF78C9691AA]\n\t(No symbol) [0x00007FF78C97F524]\n\t(No symbol) [0x00007FF78C97DFF3]\n\t(No symbol) [0x00007FF78C9717E9]\n\t(No symbol) [0x00007FF78C96F66F]\n\t(No symbol) [0x00007FF78C973B1C]\n\t(No symbol) [0x00007FF78C973BEF]\n\t(No symbol) [0x00007FF78C9C002A]\n\t(No symbol) [0x00007FF78C9C00F7]\n\t(No symbol) [0x00007FF78C9B5A6B]\n\t(No symbol) [0x00007FF78C9E70EA]\n\t(No symbol) [0x00007FF78C9B1AB6]\n\t(No symbol) [0x00007FF78C9E7300]\n\t(No symbol) [0x00007FF78CA0F2BB]\n\t(No symbol) [0x00007FF78C9E6EC3]\n\t(No symbol) [0x00007FF78C9B03F8]\n\t(No symbol) [0x00007FF78C9B1163]\n\tGetHandleVerifier [0x00007FF78CE5EEED+2870973]\n\tGetHandleVerifier [0x00007FF78CE59698+2848360]\n\tGetHandleVerifier [0x00007FF78CE76973+2967875]\n\tGetHandleVerifier [0x00007FF78CBD017A+188746]\n\tGetHandleVerifier [0x00007FF78CBD845F+222255]\n\tGetHandleVerifier [0x00007FF78CBBD2B4+111236]\n\tGetHandleVerifier [0x00007FF78CBBD462+111666]\n\tGetHandleVerifier [0x00007FF78CBA3589+5465]\n\tBaseThreadInitThunk [0x00007FFADADDE8D7+23]\n\tRtlUserThreadStart [0x00007FFADBEB14FC+44]", "trace": "self = <testCases.test_search.Test_005_Search_Functionality object at 0x0000026ED99975C0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"42b8bb546442c9a2290342d4d3adba0c\")>\n\n    @pytest.mark.sanity\n    def test_search_functionality_004(self, setup):\n        self.driver = setup\n        self.logger.info(\"**************** Test Search Functionality 004 Start ****************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the URL\")\n        self.lp = LoginPage(self.driver)\n        self.lp.click_on_my_account()\n        self.lp.click_on_login_link()\n        self.lp.set_username(self.username)\n        self.lp.set_password(self.password)\n        self.lp.click_on_login_button()\n        self.logger.info(\"***************** Login is Successful *********************\")\n        self.sf = SearchPage(self.driver)\n>       self.sf.search_product(\"iMac\")\n\ntestCases\\test_search.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\SearchPage.py:13: in search_product\n    self.driver.find_element(*SearchPage.textBox_searchField).send_keys(product)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:303: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026ED9D02450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...8CBA3589+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFADADDE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFADBEB14FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78CBB5335+78597]\nE       \tGetHandleVerifier [0x00007FF78CBB5390+78688]\nE       \t(No symbol) [0x00007FF78C9691AA]\nE       \t(No symbol) [0x00007FF78C97F524]\nE       \t(No symbol) [0x00007FF78C97DFF3]\nE       \t(No symbol) [0x00007FF78C9717E9]\nE       \t(No symbol) [0x00007FF78C96F66F]\nE       \t(No symbol) [0x00007FF78C973B1C]\nE       \t(No symbol) [0x00007FF78C973BEF]\nE       \t(No symbol) [0x00007FF78C9C002A]\nE       \t(No symbol) [0x00007FF78C9C00F7]\nE       \t(No symbol) [0x00007FF78C9B5A6B]\nE       \t(No symbol) [0x00007FF78C9E70EA]\nE       \t(No symbol) [0x00007FF78C9B1AB6]\nE       \t(No symbol) [0x00007FF78C9E7300]\nE       \t(No symbol) [0x00007FF78CA0F2BB]\nE       \t(No symbol) [0x00007FF78C9E6EC3]\nE       \t(No symbol) [0x00007FF78C9B03F8]\nE       \t(No symbol) [0x00007FF78C9B1163]\nE       \tGetHandleVerifier [0x00007FF78CE5EEED+2870973]\nE       \tGetHandleVerifier [0x00007FF78CE59698+2848360]\nE       \tGetHandleVerifier [0x00007FF78CE76973+2967875]\nE       \tGetHandleVerifier [0x00007FF78CBD017A+188746]\nE       \tGetHandleVerifier [0x00007FF78CBD845F+222255]\nE       \tGetHandleVerifier [0x00007FF78CBBD2B4+111236]\nE       \tGetHandleVerifier [0x00007FF78CBBD462+111666]\nE       \tGetHandleVerifier [0x00007FF78CBA3589+5465]\nE       \tBaseThreadInitThunk [0x00007FFADADDE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFADBEB14FC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "e1d7988c-f3c1-40ef-a889-ea14b2c51fdd-attachment.txt", "type": "text/plain"}], "start": 1745048096496, "stop": 1745048098382, "uuid": "0053f29c-7384-4ad4-a253-3fa09d260a23", "historyId": "c9182af1128958a3146803085add946e", "testCaseId": "c9182af1128958a3146803085add946e", "fullName": "testCases.test_search.Test_005_Search_Functionality#test_search_functionality_004", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "Test_005_Search_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "26428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_search"}]}