{"name": "test_forgot_password_004", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=136.0.7103.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF780B7CF25+75717]\n\tGetHandleVerifier [0x00007FF780B7CF80+75808]\n\t(No symbol) [0x00007FF780948F9A]\n\t(No symbol) [0x00007FF78095F3D4]\n\t(No symbol) [0x00007FF78095DEA3]\n\t(No symbol) [0x00007FF7809516C9]\n\t(No symbol) [0x00007FF78094F54F]\n\t(No symbol) [0x00007FF780953A0C]\n\t(No symbol) [0x00007FF780953ADF]\n\t(No symbol) [0x00007FF780998F56]\n\t(No symbol) [0x00007FF7809C737A]\n\t(No symbol) [0x00007FF780991C46]\n\t(No symbol) [0x00007FF7809C7590]\n\t(No symbol) [0x00007FF7809EF39C]\n\t(No symbol) [0x00007FF7809C7153]\n\t(No symbol) [0x00007FF780990421]\n\t(No symbol) [0x00007FF7809911B3]\n\tGetHandleVerifier [0x00007FF780E7D6FD+3223453]\n\tGetHandleVerifier [0x00007FF780E77CA2+3200322]\n\tGetHandleVerifier [0x00007FF780E95AD3+3322739]\n\tGetHandleVerifier [0x00007FF780B969FA+180890]\n\tGetHandleVerifier [0x00007FF780B9E0FF+211359]\n\tGetHandleVerifier [0x00007FF780B85274+109332]\n\tGetHandleVerifier [0x00007FF780B85422+109762]\n\tGetHandleVerifier [0x00007FF780B6BA39+4825]\n\tBaseThreadInitThunk [0x00007FF80874E8D7+23]\n\tRtlUserThreadStart [0x00007FF8095BC5DC+44]", "trace": "self = <testCases.test_forgot_password.Test_004_Forgot_Password object at 0x0000020DBFCA4180>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a253ca924d6a173ab139961bbe50d846\")>\n\n    @pytest.mark.sanity\n    def test_forgot_password_004(self, setup):\n        self.driver = setup\n        self.logger.info(\"***************** Test Forgot Password 004 Is Start *****************\")\n        try:\n            self.driver.get(self.baseURL)\n            self.lp = LoginPage(self.driver)\n            self.lp.click_on_my_account()\n            self.logger.info(\"clicking on my account\")\n            self.lp.click_on_login_link()\n            self.logger.info(\"clicking on login link\")\n            self.fp = ForgotPasswordPage(self.driver)\n            self.fp.clicking_on_forgot_password_link()\n            self.logger.info(\"clicking on forgot password link\")\n            self.fp.clicking_on_continue_button()\n            self.logger.info(\"Clicking on continue button\")\n            self.logger.info(\"************* Verifying Test Forgot Password 004 **************\")\n            self.error_message = self.driver.find_element(By.XPATH, \"//p[contains(text(),'Enter the e-mail address associated with your acco')]\")\n>           if \"Enter the e-mail address associated with your account\" in self.error_message.text:\n\ntestCases\\test_forgot_password.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:109: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020DBF84D1D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...80B6BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF80874E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8095BC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=136.0.7103.93); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF780B7CF25+75717]\nE       \tGetHandleVerifier [0x00007FF780B7CF80+75808]\nE       \t(No symbol) [0x00007FF780948F9A]\nE       \t(No symbol) [0x00007FF78095F3D4]\nE       \t(No symbol) [0x00007FF78095DEA3]\nE       \t(No symbol) [0x00007FF7809516C9]\nE       \t(No symbol) [0x00007FF78094F54F]\nE       \t(No symbol) [0x00007FF780953A0C]\nE       \t(No symbol) [0x00007FF780953ADF]\nE       \t(No symbol) [0x00007FF780998F56]\nE       \t(No symbol) [0x00007FF7809C737A]\nE       \t(No symbol) [0x00007FF780991C46]\nE       \t(No symbol) [0x00007FF7809C7590]\nE       \t(No symbol) [0x00007FF7809EF39C]\nE       \t(No symbol) [0x00007FF7809C7153]\nE       \t(No symbol) [0x00007FF780990421]\nE       \t(No symbol) [0x00007FF7809911B3]\nE       \tGetHandleVerifier [0x00007FF780E7D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF780E77CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF780E95AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF780B969FA+180890]\nE       \tGetHandleVerifier [0x00007FF780B9E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF780B85274+109332]\nE       \tGetHandleVerifier [0x00007FF780B85422+109762]\nE       \tGetHandleVerifier [0x00007FF780B6BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF80874E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8095BC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "start": 1747036494263, "stop": 1747036498344, "uuid": "8e719f6b-8ace-421c-87fe-a69a20cf3c5f", "testCaseId": "7009a285b3310ac56d2a3a438ca9e3d5", "fullName": "test_forgot_password.Test_004_Forgot_Password#test_forgot_password_004"}