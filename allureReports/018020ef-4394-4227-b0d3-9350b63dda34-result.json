{"name": "test_home_page_title", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF65AA24C25+3179557]\n\t(No symbol) [0x00007FF65A6888A0]\n\t(No symbol) [0x00007FF65A5191CA]\n\t(No symbol) [0x00007FF65A515B57]\n\t(No symbol) [0x00007FF65A5068E9]\n\t(No symbol) [0x00007FF65A508658]\n\t(No symbol) [0x00007FF65A506BF6]\n\t(No symbol) [0x00007FF65A506676]\n\t(No symbol) [0x00007FF65A50633A]\n\t(No symbol) [0x00007FF65A503EC2]\n\t(No symbol) [0x00007FF65A5047AC]\n\t(No symbol) [0x00007FF65A51D01A]\n\t(No symbol) [0x00007FF65A5C11AE]\n\t(No symbol) [0x00007FF65A597C2A]\n\t(No symbol) [0x00007FF65A5C02F3]\n\t(No symbol) [0x00007FF65A597A03]\n\t(No symbol) [0x00007FF65A5606D0]\n\t(No symbol) [0x00007FF65A561983]\n\tGetHandleVerifier [0x00007FF65AA867CD+3579853]\n\tGetHandleVerifier [0x00007FF65AA9D1D2+3672530]\n\tGetHandleVerifier [0x00007FF65AA92153+3627347]\n\tGetHandleVerifier [0x00007FF65A7F092A+868650]\n\t(No symbol) [0x00007FF65A692FFF]\n\t(No symbol) [0x00007FF65A68F4A4]\n\t(No symbol) [0x00007FF65A68F646]\n\t(No symbol) [0x00007FF65A67EAA9]\n\tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\n\tRtlUserThreadStart [0x00007FF94EDD14FC+44]", "trace": "self = <testCases.test_login.Test_002_Login_Functionality object at 0x000001AC84150CD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c4d7e2a98e0844e83cadfcebc3766184\")>\n\n    @pytest.mark.regression\n    def test_home_page_title(self, setup):\n        self.logger.info(\"****************** Test_Login_001 ***************\")\n        self.logger.info(\"***************** Verifying Home Page Title **************\")\n        self.driver = setup\n>       self.driver.get(self.baseURL)\n\ntestCases\\test_login.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AC84528980>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...07FF65A67EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF94EDD14FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF65AA24C25+3179557]\nE       \t(No symbol) [0x00007FF65A6888A0]\nE       \t(No symbol) [0x00007FF65A5191CA]\nE       \t(No symbol) [0x00007FF65A515B57]\nE       \t(No symbol) [0x00007FF65A5068E9]\nE       \t(No symbol) [0x00007FF65A508658]\nE       \t(No symbol) [0x00007FF65A506BF6]\nE       \t(No symbol) [0x00007FF65A506676]\nE       \t(No symbol) [0x00007FF65A50633A]\nE       \t(No symbol) [0x00007FF65A503EC2]\nE       \t(No symbol) [0x00007FF65A5047AC]\nE       \t(No symbol) [0x00007FF65A51D01A]\nE       \t(No symbol) [0x00007FF65A5C11AE]\nE       \t(No symbol) [0x00007FF65A597C2A]\nE       \t(No symbol) [0x00007FF65A5C02F3]\nE       \t(No symbol) [0x00007FF65A597A03]\nE       \t(No symbol) [0x00007FF65A5606D0]\nE       \t(No symbol) [0x00007FF65A561983]\nE       \tGetHandleVerifier [0x00007FF65AA867CD+3579853]\nE       \tGetHandleVerifier [0x00007FF65AA9D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF65AA92153+3627347]\nE       \tGetHandleVerifier [0x00007FF65A7F092A+868650]\nE       \t(No symbol) [0x00007FF65A692FFF]\nE       \t(No symbol) [0x00007FF65A68F4A4]\nE       \t(No symbol) [0x00007FF65A68F646]\nE       \t(No symbol) [0x00007FF65A67EAA9]\nE       \tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF94EDD14FC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "attachments": [{"name": "log", "source": "ad92001a-ae44-4783-8c5e-c8758439cb5a-attachment.txt", "type": "text/plain"}], "start": 1744709317554, "stop": 1744709360079, "uuid": "6d812020-81bf-4c05-84d9-bc0f0759dabb", "historyId": "2696d559e01e2bd0db4ea5ea15796d8e", "testCaseId": "2696d559e01e2bd0db4ea5ea15796d8e", "fullName": "test_login.Test_002_Login_Functionality#test_home_page_title", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_002_Login_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "7912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}