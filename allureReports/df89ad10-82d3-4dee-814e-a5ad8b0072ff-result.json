{"name": "test_product_compare_005", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://tutorialsninja.com/demo/index.php?route=product/category&path=20 has no size and location\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6b3d4fea5+79173]\n\tGetHandleVerifier [0x0x7ff6b3d4ff00+79264]\n\t(No symbol) [0x0x7ff6b3b09e5a]\n\t(No symbol) [0x0x7ff6b3b1184d]\n\t(No symbol) [0x0x7ff6b3b1489c]\n\t(No symbol) [0x0x7ff6b3b1496f]\n\t(No symbol) [0x0x7ff6b3b67954]\n\t(No symbol) [0x0x7ff6b3b66b8b]\n\t(No symbol) [0x0x7ff6b3bbc75d]\n\t(No symbol) [0x0x7ff6b3b8896a]\n\t(No symbol) [0x0x7ff6b3bb100d]\n\t(No symbol) [0x0x7ff6b3b88743]\n\t(No symbol) [0x0x7ff6b3b514c1]\n\t(No symbol) [0x0x7ff6b3b52253]\n\tGetHandleVerifier [0x0x7ff6b401a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff6b401472d+2981325]\n\tGetHandleVerifier [0x0x7ff6b4033380+3107360]\n\tGetHandleVerifier [0x0x7ff6b3d6aa2e+188622]\n\tGetHandleVerifier [0x0x7ff6b3d722bf+219487]\n\tGetHandleVerifier [0x0x7ff6b3d58df4+115860]\n\tGetHandleVerifier [0x0x7ff6b3d58fa9+116297]\n\tGetHandleVerifier [0x0x7ff6b3d3f558+11256]\n\tBaseThreadInitThunk [0x0x7ff8ccf4e8d7+23]\n\tRtlUserThreadStart [0x0x7ff8ce97c34c+44]", "trace": "self = <testCases.test_product_compare.Test_006_Product_Compare object at 0x000001977F788170>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40b21c5bff995b8a88c43b2195bdca86\")>\n\n    @pytest.mark.sanity\n    def test_product_compare_005(self, setup):\n        self.driver = setup\n        self.logger.info(\"***************** Test Product Compare 005 Is Start *****************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the url\")\n        self.pc = ProductComparePage(self.driver)\n        act = ActionChains(self.driver)\n        act.move_to_element(self.pc.hover_on_desktops_option()).move_to_element(\n>           self.pc.clicking_on_show_all_desktops_option()).click().perform()\n\ntestCases\\test_product_compare.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:94: in perform\n    self.w3c_actions.perform()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:170: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001977F8347C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: https://tu...ff6b3d3f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8ccf4e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8ce97c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: https://tutorialsninja.com/demo/index.php?route=product/category&path=20 has no size and location\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6b3d4fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff6b3d4ff00+79264]\nE       \t(No symbol) [0x0x7ff6b3b09e5a]\nE       \t(No symbol) [0x0x7ff6b3b1184d]\nE       \t(No symbol) [0x0x7ff6b3b1489c]\nE       \t(No symbol) [0x0x7ff6b3b1496f]\nE       \t(No symbol) [0x0x7ff6b3b67954]\nE       \t(No symbol) [0x0x7ff6b3b66b8b]\nE       \t(No symbol) [0x0x7ff6b3bbc75d]\nE       \t(No symbol) [0x0x7ff6b3b8896a]\nE       \t(No symbol) [0x0x7ff6b3bb100d]\nE       \t(No symbol) [0x0x7ff6b3b88743]\nE       \t(No symbol) [0x0x7ff6b3b514c1]\nE       \t(No symbol) [0x0x7ff6b3b52253]\nE       \tGetHandleVerifier [0x0x7ff6b401a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff6b401472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff6b4033380+3107360]\nE       \tGetHandleVerifier [0x0x7ff6b3d6aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff6b3d722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff6b3d58df4+115860]\nE       \tGetHandleVerifier [0x0x7ff6b3d58fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff6b3d3f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ff8ccf4e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff8ce97c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "61bd9b9a-8de7-47a0-89a5-b35c19eed8e2-attachment.txt", "type": "text/plain"}], "start": 1749458997258, "stop": 1749458998756, "uuid": "4e5f4a54-a01d-4f7e-8c40-4e2df2384d26", "historyId": "4e28e35f99ac5c34e00a3809a0da96f9", "testCaseId": "4e28e35f99ac5c34e00a3809a0da96f9", "fullName": "test_product_compare.Test_006_Product_Compare#test_product_compare_005", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_product_compare"}, {"name": "subSuite", "value": "Test_006_Product_Compare"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "21960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_compare"}]}