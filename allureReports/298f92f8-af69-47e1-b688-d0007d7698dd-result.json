{"name": "test_wish_list_010", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=138.0.7204.97); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7a64a6f95+76917]\n\tGetHandleVerifier [0x0x7ff7a64a6ff0+77008]\n\t(No symbol) [0x0x7ff7a6259dea]\n\t(No symbol) [0x0x7ff7a6270224]\n\t(No symbol) [0x0x7ff7a626ecf3]\n\t(No symbol) [0x0x7ff7a62624e9]\n\t(No symbol) [0x0x7ff7a6262663]\n\t(No symbol) [0x0x7ff7a626039f]\n\t(No symbol) [0x0x7ff7a6264b71]\n\t(No symbol) [0x0x7ff7a63019cb]\n\t(No symbol) [0x0x7ff7a62d846a]\n\t(No symbol) [0x0x7ff7a630065c]\n\t(No symbol) [0x0x7ff7a62d8243]\n\t(No symbol) [0x0x7ff7a62a1431]\n\t(No symbol) [0x0x7ff7a62a21c3]\n\tGetHandleVerifier [0x0x7ff7a677d2cd+3051437]\n\tGetHandleVerifier [0x0x7ff7a6777923+3028483]\n\tGetHandleVerifier [0x0x7ff7a67958bd+3151261]\n\tGetHandleVerifier [0x0x7ff7a64c185e+185662]\n\tGetHandleVerifier [0x0x7ff7a64c971f+218111]\n\tGetHandleVerifier [0x0x7ff7a64afb14+112628]\n\tGetHandleVerifier [0x0x7ff7a64afcc9+113065]\n\tGetHandleVerifier [0x0x7ff7a6496c98+10616]\n\tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\n\tRtlUserThreadStart [0x0x7ff9dce5c34c+44]", "trace": "self = <testCases.test_wish_list.Test_009_Wish_List object at 0x0000017168577F20>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4321d25002ec89754ceeb4fb9b88044b\")>\n\n    @pytest.mark.sanity\n    def test_wish_list_010(self, setup):\n        self.logger.info(\"******************************* Test Wish List 010 is Start ********************************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.lp = LoginPage(self.driver)\n        self.lp.click_on_my_account()\n        self.logger.info(\"Clicking on the my account link\")\n        self.lp.click_on_login_link()\n        self.logger.info(\"Clicking on the login link\")\n        self.lp.set_username(self.username)\n        self.logger.info(\"Entering username\")\n        self.lp.set_password(self.password)\n        self.logger.info(\"Entering password\")\n        self.lp.click_on_login_button()\n        self.logger.info(\"Clicking on the login button\")\n        self.wl = WishListPage(self.driver)\n>       self.wl.click_on_wish_list_link_from_footer_option()\n\ntestCases\\test_wish_list.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\WishListPage.py:94: in click_on_wish_list_link_from_footer_option\n    wish_list_from_footer_option = WebDriverWait(self.driver, 10, poll_frequency=2).until(\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:632: in _predicate\n    element = visibility_of(target)(driver)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017169A786D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff7a6496c98+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff9dce5c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=138.0.7204.97); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a64a6f95+76917]\nE       \tGetHandleVerifier [0x0x7ff7a64a6ff0+77008]\nE       \t(No symbol) [0x0x7ff7a6259dea]\nE       \t(No symbol) [0x0x7ff7a6270224]\nE       \t(No symbol) [0x0x7ff7a626ecf3]\nE       \t(No symbol) [0x0x7ff7a62624e9]\nE       \t(No symbol) [0x0x7ff7a6262663]\nE       \t(No symbol) [0x0x7ff7a626039f]\nE       \t(No symbol) [0x0x7ff7a6264b71]\nE       \t(No symbol) [0x0x7ff7a63019cb]\nE       \t(No symbol) [0x0x7ff7a62d846a]\nE       \t(No symbol) [0x0x7ff7a630065c]\nE       \t(No symbol) [0x0x7ff7a62d8243]\nE       \t(No symbol) [0x0x7ff7a62a1431]\nE       \t(No symbol) [0x0x7ff7a62a21c3]\nE       \tGetHandleVerifier [0x0x7ff7a677d2cd+3051437]\nE       \tGetHandleVerifier [0x0x7ff7a6777923+3028483]\nE       \tGetHandleVerifier [0x0x7ff7a67958bd+3151261]\nE       \tGetHandleVerifier [0x0x7ff7a64c185e+185662]\nE       \tGetHandleVerifier [0x0x7ff7a64c971f+218111]\nE       \tGetHandleVerifier [0x0x7ff7a64afb14+112628]\nE       \tGetHandleVerifier [0x0x7ff7a64afcc9+113065]\nE       \tGetHandleVerifier [0x0x7ff7a6496c98+10616]\nE       \tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff9dce5c34c+44]\n\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "e5d4d8f6-468f-4737-aa7b-f010a5509dfb-attachment.txt", "type": "text/plain"}], "start": 1751967444933, "stop": 1751967450480, "uuid": "b75ef960-c042-47c0-81be-af62b460e706", "historyId": "6a9afb4854fa99426530764bd9d29f21", "testCaseId": "6a9afb4854fa99426530764bd9d29f21", "fullName": "test_wish_list.Test_009_Wish_List#test_wish_list_010", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_wish_list"}, {"name": "subSuite", "value": "Test_009_Wish_List"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "12180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_wish_list"}]}