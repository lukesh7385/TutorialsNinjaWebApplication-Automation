{"name": "test_product_display_009", "status": "skipped", "statusDetails": {"message": "XFAIL Bug not fixed\n\nAssertionError: assert False", "trace": "self = <testCases.test_product_display.Test_007_Product_Display object at 0x000001FF37613350>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2436eba18a78b2d7fbc7c9068217be57\")>\n\n    @pytest.mark.xfail(reason=\"Bug not fixed\")\n    @pytest.mark.sanity\n    def test_product_display_009(self, setup):\n        self.driver = setup\n        self.logger.info(\"*************************** Test Product Display 009 is Start **************************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.sf = SearchPage(self.driver)\n        self.sf.search_product(\"Apple Cinema 30\")\n        self.logger.info(\"Entering Apple Cinema 30 to search text box field\")\n        self.sf.click_on_search_button()\n        self.logger.info(\"Clicking on the search icon button\")\n        self.pc = ProductComparePage(self.driver)\n        self.pc.click_on_the_product_display_in_search_result()\n        self.logger.info(\"Clicking on the product display in search result\")\n        self.pd = ProductDisplayPage(self.driver)\n        self.pd.click_on_specification_tab()\n        self.logger.info(\"*************************** Verifying Test Product Display 009 **************************\")\n        specification1 = self.driver.find_element(By.XPATH, '//*[@id=\"tab-specification\"]/table/tbody/tr/td[1]').text\n        specification2 = self.driver.find_element(By.XPATH, '//*[@id=\"tab-specification\"]/table/tbody/tr/td[2]').text\n        if specification1 == \"clock speed\":\n            if specification2 == \"100mhz\":\n                assert True\n                self.logger.info(\"*************** Test Product Display 009 is Passed **************\")\n            else:\n                self.logger.info(f\"Expected: '100mhz' but Actual: '{specification2}'\")\n                self.logger.error(\"*************** Test Product Display 009 is Failed **************\")\n                assert False\n        else:\n            self.logger.info(f\"Expected: 'clock speed' but Actual: '{specification1}\")\n            self.logger.error(\"*************** Test Product Display 009 is Failed **************\")\n>           assert False\nE           assert False\n\ntestCases\\test_product_display.py:435: AssertionError"}, "attachments": [{"name": "log", "source": "e3f10ace-f952-49f7-a9c0-3f1525c64b3f-attachment.txt", "type": "text/plain"}], "start": 1750018090947, "stop": 1750018092624, "uuid": "317b2b76-02f0-4ce2-b171-6d5b2fd5961d", "historyId": "2a8138e8a928d219f1acab1f7770e8d8", "testCaseId": "2a8138e8a928d219f1acab1f7770e8d8", "fullName": "test_product_display.Test_007_Product_Display#test_product_display_009", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='Bug not fixed')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_product_display"}, {"name": "subSuite", "value": "Test_007_Product_Display"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "24468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_display"}]}