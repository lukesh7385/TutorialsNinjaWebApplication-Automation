{"name": "test_add_to_cart_002", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.57)\nStacktrace:\n\tGetHandleVerifier [0x00007FF733D4CF25+75717]\n\tGetHandleVerifier [0x00007FF733D4CF80+75808]\n\t(No symbol) [0x00007FF733B18DCC]\n\t(No symbol) [0x00007FF733B709C4]\n\t(No symbol) [0x00007FF733B62394]\n\t(No symbol) [0x00007FF733B9737A]\n\t(No symbol) [0x00007FF733B61C46]\n\t(No symbol) [0x00007FF733B97590]\n\t(No symbol) [0x00007FF733BBF39C]\n\t(No symbol) [0x00007FF733B97153]\n\t(No symbol) [0x00007FF733B60421]\n\t(No symbol) [0x00007FF733B611B3]\n\tGetHandleVerifier [0x00007FF73404D6FD+3223453]\n\tGetHandleVerifier [0x00007FF734047CA2+3200322]\n\tGetHandleVerifier [0x00007FF734065AD3+3322739]\n\tGetHandleVerifier [0x00007FF733D669FA+180890]\n\tGetHandleVerifier [0x00007FF733D6E0FF+211359]\n\tGetHandleVerifier [0x00007FF733D55274+109332]\n\tGetHandleVerifier [0x00007FF733D55422+109762]\n\tGetHandleVerifier [0x00007FF733D3BA39+4825]\n\tBaseThreadInitThunk [0x00007FFCB7CCE8D7+23]\n\tRtlUserThreadStart [0x00007FFCB871C34C+44]", "trace": "self = <testCases.test_add_to_cart.Test_008_Add_To_Cart object at 0x000001740524F9D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1df9675620928c33abb71e2048e8c6fe\")>\n\n    @pytest.mark.sanity\n    def test_add_to_cart_002(self, setup):\n        self.driver = setup\n        self.logger.info(\"**************************** Test Add To Cart 002 is Start ****************************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.lp = LoginPage(self.driver)\n>       self.lp.click_on_my_account()\n\ntestCases\\test_add_to_cart.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\LoginPage.py:16: in click_on_my_account\n    self.driver.find_element(*LoginPage.link_myAccount_xpath).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017405799950>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...33D3BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB7CCE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB871C34C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.57)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF733D4CF25+75717]\nE       \tGetHandleVerifier [0x00007FF733D4CF80+75808]\nE       \t(No symbol) [0x00007FF733B18DCC]\nE       \t(No symbol) [0x00007FF733B709C4]\nE       \t(No symbol) [0x00007FF733B62394]\nE       \t(No symbol) [0x00007FF733B9737A]\nE       \t(No symbol) [0x00007FF733B61C46]\nE       \t(No symbol) [0x00007FF733B97590]\nE       \t(No symbol) [0x00007FF733BBF39C]\nE       \t(No symbol) [0x00007FF733B97153]\nE       \t(No symbol) [0x00007FF733B60421]\nE       \t(No symbol) [0x00007FF733B611B3]\nE       \tGetHandleVerifier [0x00007FF73404D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF734047CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF734065AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF733D669FA+180890]\nE       \tGetHandleVerifier [0x00007FF733D6E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF733D55274+109332]\nE       \tGetHandleVerifier [0x00007FF733D55422+109762]\nE       \tGetHandleVerifier [0x00007FF733D3BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FFCB7CCE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFCB871C34C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "1f325404-e5c1-46de-a597-dcd5a4d68ed9-attachment.txt", "type": "text/plain"}], "start": 1749066492449, "stop": 1749066505540, "uuid": "7fc5e983-9062-40dd-96d6-e38c004b1088", "historyId": "f79a14a9ce610c910e7227dffb66f452", "testCaseId": "f79a14a9ce610c910e7227dffb66f452", "fullName": "test_add_to_cart.Test_008_Add_To_Cart#test_add_to_cart_002", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "subSuite", "value": "Test_008_Add_To_Cart"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "24728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_add_to_cart"}]}