{"name": "test_register_functionality_002", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_register.Test_001_Register_Functionality object at 0x0000026ED993BD90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f43dc5949ab18d537f63d7cb92ecb90a\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    def test_register_functionality_002(self, setup):\n        self.logger.info(\"******** Test Register Functionality 002 is Started *********\")\n        self.driver = setup\n        self.logger.info(\"Navigating to the url\")\n        self.driver.get(self.baseURL)\n        self.lp = LoginPage(self.driver)\n        self.logger.info(\"clicking on myAccount drop menu\")\n        self.lp.click_on_my_account()\n        self.rf = RegisterPage(self.driver)\n        self.logger.info(\"clicking on register link\")\n        self.rf.click_on_register_link()\n        self.logger.info(\"*************** Providing Registration Details ***************\")\n        self.rf.set_firstname(\"Lukesh\")\n        self.rf.set_lastname(\"Ade\")\n        self.email = self.rf.random_generator() + \"@gmail.com\"\n        self.rf.set_email(self.email)\n        self.rf.set_phone_no(\"1234567890\")\n        self.rf.set_password(\"12345\")\n        self.rf.set_confirm_password(\"12345\")\n        self.rf.click_on_checkbox_privacy_policy()\n        self.rf.click_on_continue_button()\n        self.logger.info(\"*************** Register Functionality validation started ***************\")\n        exp_title = \"Your Account Has Been Created!\"\n        if self.driver.title == exp_title:\n            self.rf.click_on_continue_button2()\n            exp_title = \"My Account\"\n            if self.driver.title == exp_title:\n                assert True\n                self.logger.info(\"******* Test Register Functionality is Passed ********\")\n            else:\n                self.logger.info(\"**********  Test Register Functionality 002 is Failed **********\")\n                self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + \"test_register_functionality_002.png\")\n                self.driver.close()\n                assert False\n            assert True\n        else:\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + \"test_register_functionality_001.png\")\n            self.logger.info(\"**********  Register Functionality Test Failed **********\")\n            self.driver.close()\n>           assert False\nE           assert False\n\ntestCases\\test_register.py:102: AssertionError"}, "attachments": [{"name": "log", "source": "654d07f6-d653-4f0d-b719-773fd7c744c4-attachment.txt", "type": "text/plain"}], "start": 1745048056074, "stop": 1745048058852, "uuid": "36fd480c-4177-4196-b71d-ef84711c6136", "historyId": "763c036ecbc4b32cb94ee5e0a73fbdf3", "testCaseId": "763c036ecbc4b32cb94ee5e0a73fbdf3", "fullName": "testCases.test_register.Test_001_Register_Functionality#test_register_functionality_002", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "Test_001_Register_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "26428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_register"}]}