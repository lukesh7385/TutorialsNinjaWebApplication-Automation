{"name": "test_shopping_cart_005", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testCases.test_shopping_cart.Test_010_Shopping_Cart object at 0x000001BDD31A84D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c33f5b6beaf6597d64de589a42b71840\")>\n\n    @pytest.mark.sanity\n    def test_shopping_cart_005(self, setup):\n        self.logger.info(\"**************************** Test Shopping Cart 005 is Start *****************************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.sf = SearchPage(self.driver)\n        self.sf.search_product(\"iMac\")\n        self.logger.info(\"Entering iMac to the search text box field\")\n        self.sf.click_on_search_button()\n        self.logger.info(\"Clicking on the search icon button\")\n        self.atc = AddToCartPage(self.driver)\n        self.atc.click_on_add_to_cart_button_on_product_display_in_search_result()\n        self.logger.info(\"Clicking on the add to cart button\")\n        self.atc.click_on_cart_button_in_black_color_beside_of_search_icon()\n        self.logger.info(\"Clicking on the cart button beside of search icon\")\n>       self.atc.click_on_view_cart_option()\n\ntestCases\\test_shopping_cart.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\AddToCartPage.py:67: in click_on_view_cart_option\n    view_cart_option = wait.until(EC.element_to_be_clickable(AddToCartPage.viewCartOption))\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c33f5b6beaf6597d64de589a42b71840\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001BDD44A1120>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "221b0eac-c35b-4900-b581-145a19227c35-attachment.txt", "type": "text/plain"}], "start": 1755339746659, "stop": 1755339758315, "uuid": "df4b509a-2819-43a7-9480-43fd38c8905a", "historyId": "cca07382e8e2245a7f30ecface800960", "testCaseId": "cca07382e8e2245a7f30ecface800960", "fullName": "test_shopping_cart.Test_010_Shopping_Cart#test_shopping_cart_005", "labels": [{"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_shopping_cart"}, {"name": "subSuite", "value": "Test_010_Shopping_Cart"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "23536-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_shopping_cart"}], "titlePath": ["test_shopping_cart.py", "Test_010_Shopping_Cart"]}