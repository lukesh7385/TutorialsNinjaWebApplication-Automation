{"name": "test_product_display_006", "status": "skipped", "statusDetails": {"message": "XFAIL Bug not fixed\n\nAssertionError: assert False", "trace": "self = <testCases.test_product_display.Test_007_Product_Display object at 0x000002049C6C17B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"57bf221a3cbb62910ef3a38eced10473\")>\n\n    @pytest.mark.xfail(reason=\"Bug not fixed\")\n    @pytest.mark.sanity\n    def test_product_display_006(self, setup):\n        self.driver = setup\n        self.logger.info(\"************************* Test Product Display 006 is Start *************************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.sf = SearchPage(self.driver)\n        self.sf.search_product(\"iMac\")\n        self.logger.info(\"Entering iMac product to the search text box field\")\n        self.sf.click_on_search_button()\n        self.logger.info(\"Clicking on the search icon button\")\n        self.pc = ProductComparePage(self.driver)\n        self.pc.click_on_the_product_display_in_search_result()\n        self.logger.info(\"Clicking on the product display in the search result\")\n        self.logger.info(\"************************* Verifying Test Product Display 006 *************************\")\n        self.pd = ProductDisplayPage(self.driver)\n        if self.pd.get_default_product_quantity() == \"1\":\n            self.pd.set_product_quantity(\"-1\")\n            self.logger.info(\"Updating the product quantity to -1\")\n            self.pd.click_on_add_to_cart_button_on_product_display_page()\n            self.logger.info(\"Clicking on the add to cart button\")\n    \n            WebDriverWait(self.driver, 10).until(\n                lambda driver: driver.execute_script(\"return document.readyState\") == \"complete\"\n            )\n            self.logger.info(\"Page has fully loaded\")\n    \n            if self.pd.get_default_product_quantity() == \"1\":\n                assert True\n                self.logger.info(\"*********** Test Product Display 006 is Passed ***********\")\n            else:\n                self.logger.error(f\"{self.pd.get_default_product_quantity()}\")\n                self.logger.error(\"*********** Test Product Display 006 is Failed ***********\")\n>               assert False\nE               assert False\n\ntestCases\\test_product_display.py:289: AssertionError"}, "attachments": [{"name": "log", "source": "360e6e2a-ae0c-423d-ac18-43d0e2688a23-attachment.txt", "type": "text/plain"}], "start": 1755339703637, "stop": 1755339706897, "uuid": "96230a25-9279-43ef-a5b5-3c288ef590b5", "historyId": "bd17cc062d38be50ef9f669f72acd4c8", "testCaseId": "bd17cc062d38be50ef9f669f72acd4c8", "fullName": "test_product_display.Test_007_Product_Display#test_product_display_006", "labels": [{"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_product_display"}, {"name": "subSuite", "value": "Test_007_Product_Display"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "26256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_product_display"}], "titlePath": ["test_product_display.py", "Test_007_Product_Display"]}