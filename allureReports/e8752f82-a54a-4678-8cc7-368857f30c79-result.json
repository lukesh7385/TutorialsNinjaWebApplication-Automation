{"name": "test_add_to_cart_009[headless-edge]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 136\nCurrent browser version is 138.0.3351.65 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF658C7FCA5+25029]\n\t(No symbol) [0x00007FF658BD4CB0]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF658EDADAA+1947706]\n\t(No symbol) [0x00007FF6589DA04E]\n\t(No symbol) [0x00007FF6589D9408]\n\t(No symbol) [0x00007FF6589D35E5]\n\t(No symbol) [0x00007FF6589D03B3]\n\t(No symbol) [0x00007FF658A152CD]\n\t(No symbol) [0x00007FF658A143CB]\n\t(No symbol) [0x00007FF658A08DF3]\n\t(No symbol) [0x00007FF6589DD6A6]\n\t(No symbol) [0x00007FF6589DCBB3]\n\t(No symbol) [0x00007FF6589DD4D3]\n\t(No symbol) [0x00007FF658AE5D0D]\n\t(No symbol) [0x00007FF658AF38AF]\n\t(No symbol) [0x00007FF658AEC29F]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF658D44D5A+284650]\n\t(No symbol) [0x00007FF658BE2641]\n\t(No symbol) [0x00007FF658BDB0E4]\n\t(No symbol) [0x00007FF658BDB233]\n\t(No symbol) [0x00007FF658BCCE76]\n\tBaseThreadInitThunk [0x00007FF9DBDBE8D7+23]\n\tRtlUserThreadStart [0x00007FF9DCE5C34C+44]", "trace": "browser = 'headless-edge'\n\n    @pytest.fixture(scope=\"function\")\n    def setup(browser):\n        global driver\n    \n        if browser == \"chrome\":\n            service = Service(\"C:\\\\Drivers\\\\chromedriver.exe\")\n            options = webdriver.ChromeOptions()\n            options.add_experimental_option(\"detach\", True)\n            options.add_argument(\"--disable-notifications\")\n            driver = webdriver.Chrome(service=service, options=options)\n            print(\"Launching Chrome browser\")\n    \n        elif browser == \"firefox\":\n            service = FirefoxService(\"C:\\\\Drivers\\\\geckodriver.exe\")\n            options = webdriver.FirefoxOptions()\n            options.binary_location = \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\"\n            driver = webdriver.Firefox(service=service, options=options)\n            print(\"Launching Firefox browser\")\n    \n        elif browser == \"edge\":\n            service = EdgeService(\"C:\\\\Drivers\\\\msedgedriver.exe\")\n            options = webdriver.EdgeOptions()\n            driver = webdriver.Edge(service=service, options=options)\n            print(\"Launching Edge browser\")\n    \n        elif browser == \"headless-chrome\":\n            service = Service(\"C:\\\\Drivers\\\\chromedriver.exe\")\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"--headless=new\")\n            options.add_argument(\"--disable-notifications\")\n            options.add_argument(\"--disable-gpu\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920x1080\")\n            driver = webdriver.Chrome(service=service, options=options)\n            print(\"Launching Headless Chrome\")\n    \n        elif browser == \"headless-firefox\":\n            service = FirefoxService(\"C:\\\\Drivers\\\\geckodriver.exe\")\n            options = webdriver.FirefoxOptions()\n            options.binary_location = \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\"\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--disable-notifications\")\n            options.add_argument(\"--window-size=1920x1080\")\n            driver = webdriver.Firefox(service=service, options=options)\n            print(\"Launching Headless Firefox\")\n    \n        elif browser == \"headless-edge\":\n            service = EdgeService(\"C:\\\\Drivers\\\\msedgedriver.exe\")\n            options = webdriver.EdgeOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--disable-notifications\")\n            options.add_argument(\"--window-size=1920x1080\")\n>           driver = webdriver.Edge(service=service, options=options)\n\ntestCases\\conftest.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022483050B90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Micr...07FF658BCCE76]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9DBDBE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9DCE5C34C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 136\nE       Current browser version is 138.0.3351.65 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF658C7FCA5+25029]\nE       \t(No symbol) [0x00007FF658BD4CB0]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF658EDADAA+1947706]\nE       \t(No symbol) [0x00007FF6589DA04E]\nE       \t(No symbol) [0x00007FF6589D9408]\nE       \t(No symbol) [0x00007FF6589D35E5]\nE       \t(No symbol) [0x00007FF6589D03B3]\nE       \t(No symbol) [0x00007FF658A152CD]\nE       \t(No symbol) [0x00007FF658A143CB]\nE       \t(No symbol) [0x00007FF658A08DF3]\nE       \t(No symbol) [0x00007FF6589DD6A6]\nE       \t(No symbol) [0x00007FF6589DCBB3]\nE       \t(No symbol) [0x00007FF6589DD4D3]\nE       \t(No symbol) [0x00007FF658AE5D0D]\nE       \t(No symbol) [0x00007FF658AF38AF]\nE       \t(No symbol) [0x00007FF658AEC29F]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF658D44D5A+284650]\nE       \t(No symbol) [0x00007FF658BE2641]\nE       \t(No symbol) [0x00007FF658BDB0E4]\nE       \t(No symbol) [0x00007FF658BDB233]\nE       \t(No symbol) [0x00007FF658BCCE76]\nE       \tBaseThreadInitThunk [0x00007FF9DBDBE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9DCE5C34C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "parameters": [{"name": "browser", "value": "'headless-edge'"}], "start": 1751784423669, "stop": 1751784423669, "uuid": "2053987a-a807-4d9f-94fe-9e3fbf8b01af", "historyId": "d767bf060ce0d49c1bfee060b026357a", "testCaseId": "5006414971d2e3eed337fc848b8d23ec", "fullName": "test_add_to_cart.Test_008_Add_To_Cart#test_add_to_cart_009", "labels": [{"name": "tag", "value": "run_this_test"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "subSuite", "value": "Test_008_Add_To_Cart"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "17532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_add_to_cart"}]}