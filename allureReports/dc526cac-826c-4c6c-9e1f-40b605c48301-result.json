{"name": "test_forgot_password_003", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff63ff4fea5+79173]\n\tGetHandleVerifier [0x0x7ff63ff4ff00+79264]\n\t(No symbol) [0x0x7ff63fd09c8c]\n\t(No symbol) [0x0x7ff63fd61a84]\n\t(No symbol) [0x0x7ff63fd53464]\n\t(No symbol) [0x0x7ff63fd8896a]\n\t(No symbol) [0x0x7ff63fd52d16]\n\t(No symbol) [0x0x7ff63fd88b80]\n\t(No symbol) [0x0x7ff63fdb100d]\n\t(No symbol) [0x0x7ff63fd88743]\n\t(No symbol) [0x0x7ff63fd514c1]\n\t(No symbol) [0x0x7ff63fd52253]\n\tGetHandleVerifier [0x0x7ff64021a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff64021472d+2981325]\n\tGetHandleVerifier [0x0x7ff640233380+3107360]\n\tGetHandleVerifier [0x0x7ff63ff6aa2e+188622]\n\tGetHandleVerifier [0x0x7ff63ff722bf+219487]\n\tGetHandleVerifier [0x0x7ff63ff58df4+115860]\n\tGetHandleVerifier [0x0x7ff63ff58fa9+116297]\n\tGetHandleVerifier [0x0x7ff63ff3f558+11256]\n\tBaseThreadInitThunk [0x0x7ffcb7cce8d7+23]\n\tRtlUserThreadStart [0x0x7ffcb871c34c+44]", "trace": "self = <testCases.test_forgot_password.Test_004_Forgot_Password object at 0x00000242EB9DF490>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7ccc9ca9b03af474041be79164b17af\")>\n\n    @pytest.mark.sanity\n    def test_forgot_password_003(self, setup):\n        self.driver = setup\n        self.logger.info(\"************ Test Forgot Password 003 Start ************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the url\")\n        self.lp = LoginPage(self.driver)\n>       self.lp.click_on_my_account()\n\ntestCases\\test_forgot_password.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\LoginPage.py:16: in click_on_my_account\n    self.driver.find_element(*LoginPage.link_myAccount_xpath).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000242EC2F8EC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff63ff3f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcb7cce8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcb871c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff63ff4fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff63ff4ff00+79264]\nE       \t(No symbol) [0x0x7ff63fd09c8c]\nE       \t(No symbol) [0x0x7ff63fd61a84]\nE       \t(No symbol) [0x0x7ff63fd53464]\nE       \t(No symbol) [0x0x7ff63fd8896a]\nE       \t(No symbol) [0x0x7ff63fd52d16]\nE       \t(No symbol) [0x0x7ff63fd88b80]\nE       \t(No symbol) [0x0x7ff63fdb100d]\nE       \t(No symbol) [0x0x7ff63fd88743]\nE       \t(No symbol) [0x0x7ff63fd514c1]\nE       \t(No symbol) [0x0x7ff63fd52253]\nE       \tGetHandleVerifier [0x0x7ff64021a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff64021472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff640233380+3107360]\nE       \tGetHandleVerifier [0x0x7ff63ff6aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff63ff722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff63ff58df4+115860]\nE       \tGetHandleVerifier [0x0x7ff63ff58fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff63ff3f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffcb7cce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcb871c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "a937c621-563a-4155-a804-368ce63c8f80-attachment.txt", "type": "text/plain"}], "start": 1749067710053, "stop": 1749067721625, "uuid": "68cc79d8-4a18-4260-adba-6bbefd3dc621", "historyId": "1f93bc7c33b9288ccc885f9231c96467", "testCaseId": "1f93bc7c33b9288ccc885f9231c96467", "fullName": "testCases.test_forgot_password.Test_004_Forgot_Password#test_forgot_password_003", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_forgot_password"}, {"name": "subSuite", "value": "Test_004_Forgot_Password"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "22772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_forgot_password"}]}