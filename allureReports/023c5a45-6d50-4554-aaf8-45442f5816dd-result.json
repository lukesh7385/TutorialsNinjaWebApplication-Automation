{"name": "test_register_functionality_004", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_register.Test_001_Register_Functionality object at 0x000002876B29AD70>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3ae4a86d59ac139fdd83f238de8fa957\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    def test_register_functionality_004(self, setup):\n        self.logger.info(\"******** Test Register Functionality 004 is Started *********\")\n        self.driver = setup\n        self.logger.info(\"Navigating to the url\")\n        self.driver.get(self.baseURL)\n        self.lp = LoginPage(self.driver)\n        self.logger.info(\"clicking on myAccount drop menu\")\n        self.lp.click_on_my_account()\n        self.rf = RegisterPage(self.driver)\n        self.logger.info(\"clicking on register link\")\n        self.rf.click_on_register_link()\n        self.logger.info(\"*************** Providing Registration Details ***************\")\n        self.rf.set_firstname(\"Lukesh\")\n        self.rf.set_lastname(\"Ade\")\n        self.email = self.rf.random_generator() + \"@gmail.com\"\n        self.rf.set_email(self.email)\n        self.rf.set_phone_no(\"1234567890\")\n        self.rf.set_password(\"12345\")\n        self.rf.set_confirm_password(\"12345\")\n        self.rf.click_on_radiobutton_newsletter_yes()\n        self.rf.click_on_checkbox_privacy_policy()\n        self.rf.click_on_continue_button()\n        self.logger.info(\"*************** Register Functionality validation started ***************\")\n        exp_title = \"Your Account Has Been Created!\"\n        if self.driver.title == exp_title:\n            self.rf.click_on_continue_button2()\n            exp_title = \"My Account\"\n            if self.driver.title == exp_title:\n                self.rf.clicking_on_news_letter_option()\n                if self.driver.find_element(By.XPATH, \"//input[@value='1']\").is_selected():\n                    self.driver.find_element(By.XPATH, \"//div[@class='pull-right']\").click()\n                    success_message = self.driver.find_element(By.XPATH, \"//div[@class='alert alert-success alert-dismissible']\").text\n                    if success_message == \"Success: Your newsletter subscription has been successfully updated\":\n                        assert True\n                        self.logger.info(\"******* Test Register Functionality 004 is Passed ********\")\n                    else:\n                        self.logger.info(\"******* Test Register Functionality 004 is Failed ********\")\n                        self.driver.save_screenshot(\".\\\\Screenshots\\\\test_register_functionality_004_failed.png\")\n>                       assert False\nE                       assert False\n\ntestCases\\test_register.py:191: AssertionError"}, "attachments": [{"name": "log", "source": "249d3549-8b37-4092-bb21-8cb6f1255dac-attachment.txt", "type": "text/plain"}], "start": 1743589902466, "stop": 1743589906230, "uuid": "fb7b88b1-1779-4898-9cb2-7b6a784f48f7", "historyId": "aedc9f06843056f662457a0555d2cf37", "testCaseId": "aedc9f06843056f662457a0555d2cf37", "fullName": "test_register.Test_001_Register_Functionality#test_register_functionality_004", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "Test_001_Register_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "32288-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register"}]}