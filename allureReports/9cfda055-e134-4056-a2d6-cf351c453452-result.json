{"name": "test_wish_list_018", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"fa fa-heart\"></i> is not clickable at point (196, 436). Other element would receive the click: <div id=\"content\" class=\"col-sm-12\">...</div>\n  (Session info: chrome=138.0.7204.97)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7a64a6f95+76917]\n\tGetHandleVerifier [0x0x7ff7a64a6ff0+77008]\n\t(No symbol) [0x0x7ff7a6259dea]\n\t(No symbol) [0x0x7ff7a62b8269]\n\t(No symbol) [0x0x7ff7a62b5c02]\n\t(No symbol) [0x0x7ff7a62b2c41]\n\t(No symbol) [0x0x7ff7a62b1b31]\n\t(No symbol) [0x0x7ff7a62a3368]\n\t(No symbol) [0x0x7ff7a62d846a]\n\t(No symbol) [0x0x7ff7a62a2c16]\n\t(No symbol) [0x0x7ff7a62d8680]\n\t(No symbol) [0x0x7ff7a630065c]\n\t(No symbol) [0x0x7ff7a62d8243]\n\t(No symbol) [0x0x7ff7a62a1431]\n\t(No symbol) [0x0x7ff7a62a21c3]\n\tGetHandleVerifier [0x0x7ff7a677d2cd+3051437]\n\tGetHandleVerifier [0x0x7ff7a6777923+3028483]\n\tGetHandleVerifier [0x0x7ff7a67958bd+3151261]\n\tGetHandleVerifier [0x0x7ff7a64c185e+185662]\n\tGetHandleVerifier [0x0x7ff7a64c971f+218111]\n\tGetHandleVerifier [0x0x7ff7a64afb14+112628]\n\tGetHandleVerifier [0x0x7ff7a64afcc9+113065]\n\tGetHandleVerifier [0x0x7ff7a6496c98+10616]\n\tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\n\tRtlUserThreadStart [0x0x7ff9dce5c34c+44]", "trace": "self = <testCases.test_wish_list.Test_009_Wish_List object at 0x0000013FEDBF9FF0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d595007961afb5dd63c7bfdb02ec4390\")>\n\n    @pytest.mark.sanity\n    def test_wish_list_018(self, setup):\n        self.logger.info(\"************************** Test Wish List 018 is Start ****************************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.lp = LoginPage(self.driver)\n        self.lp.click_on_my_account()\n        self.lp.click_on_login_link()\n        self.lp.set_username(self.username)\n        self.lp.set_password(self.password)\n        self.lp.click_on_login_button()\n        self.logger.info(\"Login is Successful\")\n        self.wl = WishListPage(self.driver)\n        self.wl.click_on_modify_your_wish_list_option()\n        self.logger.info(\"Clicking on the modify your wish list option\")\n        self.wl.clear_wishlist_if_not_empty()\n        self.logger.info(\"Clearing all my wish list\")\n        self.driver.back()\n        self.wl.click_on_account_breadcrumb_option()\n        self.logger.info(\"Clicking on the account breadcrumb option\")\n        self.sf = SearchPage(self.driver)\n        self.sf.search_product(\"iMac\")\n        self.logger.info(\"Entering iMac product to search text box field\")\n        self.sf.click_on_search_button()\n        self.logger.info(\"Clicking on the search icon button\")\n        self.wl = WishListPage(self.driver)\n        self.wl.click_on_add_to_wish_list_option_on_the_product_display_in_search_result()\n        self.logger.info(\"Clicking on the add to wish list option\")\n>       self.wl.click_on_add_to_wish_list_option_on_the_product_display_in_search_result()\n\ntestCases\\test_wish_list.py:797: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\WishListPage.py:79: in click_on_add_to_wish_list_option_on_the_product_display_in_search_result\n    wish_list_option.click()\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013FEEDFDA70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff7a6496c98+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff9dce5c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"fa fa-heart\"></i> is not clickable at point (196, 436). Other element would receive the click: <div id=\"content\" class=\"col-sm-12\">...</div>\nE         (Session info: chrome=138.0.7204.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a64a6f95+76917]\nE       \tGetHandleVerifier [0x0x7ff7a64a6ff0+77008]\nE       \t(No symbol) [0x0x7ff7a6259dea]\nE       \t(No symbol) [0x0x7ff7a62b8269]\nE       \t(No symbol) [0x0x7ff7a62b5c02]\nE       \t(No symbol) [0x0x7ff7a62b2c41]\nE       \t(No symbol) [0x0x7ff7a62b1b31]\nE       \t(No symbol) [0x0x7ff7a62a3368]\nE       \t(No symbol) [0x0x7ff7a62d846a]\nE       \t(No symbol) [0x0x7ff7a62a2c16]\nE       \t(No symbol) [0x0x7ff7a62d8680]\nE       \t(No symbol) [0x0x7ff7a630065c]\nE       \t(No symbol) [0x0x7ff7a62d8243]\nE       \t(No symbol) [0x0x7ff7a62a1431]\nE       \t(No symbol) [0x0x7ff7a62a21c3]\nE       \tGetHandleVerifier [0x0x7ff7a677d2cd+3051437]\nE       \tGetHandleVerifier [0x0x7ff7a6777923+3028483]\nE       \tGetHandleVerifier [0x0x7ff7a67958bd+3151261]\nE       \tGetHandleVerifier [0x0x7ff7a64c185e+185662]\nE       \tGetHandleVerifier [0x0x7ff7a64c971f+218111]\nE       \tGetHandleVerifier [0x0x7ff7a64afb14+112628]\nE       \tGetHandleVerifier [0x0x7ff7a64afcc9+113065]\nE       \tGetHandleVerifier [0x0x7ff7a6496c98+10616]\nE       \tBaseThreadInitThunk [0x0x7ff9dbdbe8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff9dce5c34c+44]\n\nC:\\Program Files\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "f2764b7d-9f36-41ce-9e21-e58712a8b0a9-attachment.txt", "type": "text/plain"}], "start": 1751967484446, "stop": 1751967506174, "uuid": "8aaa8c1c-79ed-461a-8a64-10b67462cf8d", "historyId": "ddfb806c62250aca4a3e16379de190f7", "testCaseId": "ddfb806c62250aca4a3e16379de190f7", "fullName": "test_wish_list.Test_009_Wish_List#test_wish_list_018", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_wish_list"}, {"name": "subSuite", "value": "Test_009_Wish_List"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "31644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_wish_list"}]}