{"name": "test_wish_list_019", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_wish_list.Test_009_Wish_List object at 0x00000280CAE39BD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8d13391eec65893af9c1d713e889c797\")>\n\n    @pytest.mark.sanity\n    def test_wish_list_019(self, setup):\n        self.logger.info(\"***************************** Test Wish List 019 is Start *******************************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the base url\")\n        self.wl = WishListPage(self.driver)\n        self.atc = AddToCartPage(self.driver)\n        wish_list_header_option = self.wl.is_enable_and_is_display(self.atc.wishListHeaderOption)\n        self.logger.info(\"***************************** Verifying Test Wish List 019 *******************************\")\n        if wish_list_header_option:\n            add_to_wish_list_option_feature = self.wl.is_enable_and_is_display(self.wl.wishListOptionFromFeaturePage)\n            if add_to_wish_list_option_feature:\n                wish_list_link_footer = self.wl.is_enable_and_is_display(self.wl.wishListLinkFromFooterOption)\n                if wish_list_link_footer:\n                    self.lp = LoginPage(self.driver)\n                    self.lp.click_on_my_account()\n                    self.lp.click_on_login_link()\n                    self.lp.set_username(self.username)\n                    self.lp.set_password(self.password)\n                    self.lp.click_on_login_button()\n                    self.logger.info(\"Login is Successful\")\n                    modify_your_wish_list_option = self.wl.is_enable_and_is_display(self.wl.modifyYourWishListOption)\n                    if modify_your_wish_list_option:\n                        wish_list_option_from_right_column = self.wl.is_enable_and_is_display(\n                            self.wl.wishListOptionFromRightColumn)\n                        if wish_list_option_from_right_column:\n                            self.wl.click_on_modify_your_wish_list_option()\n                            self.logger.info(\"Clicking on modify your wish list option\")\n                            my_wish_list_breadcrumb_option = self.wl.is_enable_and_is_display(\n                                self.wl.myWishListBreadcrumbOption)\n                            if my_wish_list_breadcrumb_option:\n                                self.sf = SearchPage(self.driver)\n                                self.sf.search_product(\"iMac\")\n                                self.logger.info(\"Entering iMac to search text box field\")\n                                self.sf.click_on_search_button()\n                                self.logger.info(\"Clicking on the search icon button\")\n                                add_to_wish_list_option_product_display_search_result = self.wl.is_enable_and_is_display(\n                                    self.wl.addToWishListOptionInSearchResultPage)\n                                if add_to_wish_list_option_product_display_search_result:\n                                    self.wl.click_on_add_to_wish_list_option_on_the_product_display_in_search_result()\n                                    self.logger.info(\"Clicking on the add to wish list option search result\")\n                                    wish_list_link_in_success_message = self.wl.is_enable_and_is_display(\n                                        self.wl.wishListLink)\n                                    if wish_list_link_in_success_message:\n                                        assert True\n                                        self.logger.info(\"*************** Test Wish List 019 is Passed ***************\")\n                                    else:\n                                        self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                                        assert False\n                                else:\n                                    self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                                    assert False\n                            else:\n                                self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                                assert False\n                        else:\n                            self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                            assert False\n                    else:\n                        self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                        assert False\n                else:\n                    self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                    assert False\n            else:\n                self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n                assert False\n        else:\n            self.logger.error(\"*************** Test Wish List 019 is Failed ***************\")\n>           assert False\nE           assert False\n\ntestCases\\test_wish_list.py:897: AssertionError"}, "attachments": [{"name": "log", "source": "616c4132-bec9-4020-9a2e-8502e75241b9-attachment.txt", "type": "text/plain"}], "start": 1751870433310, "stop": 1751870435658, "uuid": "d4cd3cb7-324b-4581-a252-8deecb072280", "historyId": "11ea532e75f6cb764bc4957bfabeca6b", "testCaseId": "11ea532e75f6cb764bc4957bfabeca6b", "fullName": "test_wish_list.Test_009_Wish_List#test_wish_list_019", "labels": [{"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_wish_list"}, {"name": "subSuite", "value": "Test_009_Wish_List"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "27504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_wish_list"}]}