{"name": "test_logout_functionality_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=134.0.6998.178); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7ED3C4C25+3179557]\n\t(No symbol) [0x00007FF7ED0288A0]\n\t(No symbol) [0x00007FF7ECEB91CA]\n\t(No symbol) [0x00007FF7ECECF5C4]\n\t(No symbol) [0x00007FF7ECECE093]\n\t(No symbol) [0x00007FF7ECEC18C1]\n\t(No symbol) [0x00007FF7ECEBF632]\n\t(No symbol) [0x00007FF7ECEC3BCC]\n\t(No symbol) [0x00007FF7ECEC3C9F]\n\t(No symbol) [0x00007FF7ECF11BAD]\n\t(No symbol) [0x00007FF7ECF02990]\n\t(No symbol) [0x00007FF7ECF37C2A]\n\t(No symbol) [0x00007FF7ECF022D6]\n\t(No symbol) [0x00007FF7ECF37E40]\n\t(No symbol) [0x00007FF7ECF602F3]\n\t(No symbol) [0x00007FF7ECF37A03]\n\t(No symbol) [0x00007FF7ECF006D0]\n\t(No symbol) [0x00007FF7ECF01983]\n\tGetHandleVerifier [0x00007FF7ED4267CD+3579853]\n\tGetHandleVerifier [0x00007FF7ED43D1D2+3672530]\n\tGetHandleVerifier [0x00007FF7ED432153+3627347]\n\tGetHandleVerifier [0x00007FF7ED19092A+868650]\n\t(No symbol) [0x00007FF7ED032FFF]\n\t(No symbol) [0x00007FF7ED02F4A4]\n\t(No symbol) [0x00007FF7ED02F646]\n\t(No symbol) [0x00007FF7ED01EAA9]\n\tBaseThreadInitThunk [0x00007FFC42FBE8D7+23]\n\tRtlUserThreadStart [0x00007FFC44BF14FC+44]", "trace": "self = <testCases.test_logout.Test_003_Logout_Functionality object at 0x000001F6CBE06350>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca3ed5e838b2248d37f7b28d8767a708\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    def test_logout_functionality_001(self, setup):\n        self.logger.info(\"*************** Logout Functionality 001 Test Start ****************\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.lp = LoginPage(self.driver)\n        self.lp.click_on_my_account()\n        self.lp.click_on_login_link()\n        self.lp.set_username(self.username)\n        self.lp.set_password(self.password)\n        self.lp.click_on_login_button()\n        self.logger.info(\"**************** Login is Successful ******************\")\n>       self.lp.click_on_my_account()\n\ntestCases\\test_logout.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\LoginPage.py:16: in click_on_my_account\n    self.driver.find_element(*LoginPage.link_myAccount_CSS_SELECTOR).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F6CBF24550>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF7ED01EAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC42FBE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFC44BF14FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=134.0.6998.178); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7ED3C4C25+3179557]\nE       \t(No symbol) [0x00007FF7ED0288A0]\nE       \t(No symbol) [0x00007FF7ECEB91CA]\nE       \t(No symbol) [0x00007FF7ECECF5C4]\nE       \t(No symbol) [0x00007FF7ECECE093]\nE       \t(No symbol) [0x00007FF7ECEC18C1]\nE       \t(No symbol) [0x00007FF7ECEBF632]\nE       \t(No symbol) [0x00007FF7ECEC3BCC]\nE       \t(No symbol) [0x00007FF7ECEC3C9F]\nE       \t(No symbol) [0x00007FF7ECF11BAD]\nE       \t(No symbol) [0x00007FF7ECF02990]\nE       \t(No symbol) [0x00007FF7ECF37C2A]\nE       \t(No symbol) [0x00007FF7ECF022D6]\nE       \t(No symbol) [0x00007FF7ECF37E40]\nE       \t(No symbol) [0x00007FF7ECF602F3]\nE       \t(No symbol) [0x00007FF7ECF37A03]\nE       \t(No symbol) [0x00007FF7ECF006D0]\nE       \t(No symbol) [0x00007FF7ECF01983]\nE       \tGetHandleVerifier [0x00007FF7ED4267CD+3579853]\nE       \tGetHandleVerifier [0x00007FF7ED43D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF7ED432153+3627347]\nE       \tGetHandleVerifier [0x00007FF7ED19092A+868650]\nE       \t(No symbol) [0x00007FF7ED032FFF]\nE       \t(No symbol) [0x00007FF7ED02F4A4]\nE       \t(No symbol) [0x00007FF7ED02F646]\nE       \t(No symbol) [0x00007FF7ED01EAA9]\nE       \tBaseThreadInitThunk [0x00007FFC42FBE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFC44BF14FC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "27c2c73c-0fce-4ad7-93d4-b603f4380881-attachment.txt", "type": "text/plain"}], "start": 1743433518205, "stop": 1743433522119, "uuid": "dae904db-4a07-49b8-bc6b-8a2c1566f0a7", "historyId": "ca026035456c58374fc4ffdc45c59c92", "testCaseId": "ca026035456c58374fc4ffdc45c59c92", "fullName": "testCases.test_logout.Test_003_Logout_Functionality#test_logout_functionality_001", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_logout"}, {"name": "subSuite", "value": "Test_003_Logout_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "30484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_logout"}]}