{"name": "test_search_functionality_003", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=135.0.7049.85)\nStacktrace:\n\tGetHandleVerifier [0x00007FF648984C25+3179557]\n\t(No symbol) [0x00007FF6485E88A0]\n\t(No symbol) [0x00007FF6484791CA]\n\t(No symbol) [0x00007FF648451753]\n\t(No symbol) [0x00007FF6484FF83E]\n\t(No symbol) [0x00007FF64851FBE2]\n\t(No symbol) [0x00007FF6484F7A03]\n\t(No symbol) [0x00007FF6484C06D0]\n\t(No symbol) [0x00007FF6484C1983]\n\tGetHandleVerifier [0x00007FF6489E67CD+3579853]\n\tGetHandleVerifier [0x00007FF6489FD1D2+3672530]\n\tGetHandleVerifier [0x00007FF6489F2153+3627347]\n\tGetHandleVerifier [0x00007FF64875092A+868650]\n\t(No symbol) [0x00007FF6485F2FFF]\n\t(No symbol) [0x00007FF6485EF4A4]\n\t(No symbol) [0x00007FF6485EF646]\n\t(No symbol) [0x00007FF6485DEAA9]\n\tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\n\tRtlUserThreadStart [0x00007FF94EDD14FC+44]", "trace": "self = <testCases.test_search.Test_005_Search_Functionality object at 0x00000223C16D75C0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e1874de9767b56b42ece190f2e5cb552\")>\n\n    @pytest.mark.sanity\n    def test_search_functionality_003(self, setup):\n        self.driver = setup\n        self.logger.info(\"**************** Test Search Functionality 003 Started ******************\")\n        self.driver.get(self.baseURL)\n        self.logger.info(\"Navigating to the URL\")\n        self.sf = SearchPage(self.driver)\n>       self.sf.click_on_search_button()\n\ntestCases\\test_search.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\SearchPage.py:16: in click_on_search_button\n    self.driver.find_element(*SearchPage.button_search).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000223C1893350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6485DEAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF94EDD14FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=135.0.7049.85)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF648984C25+3179557]\nE       \t(No symbol) [0x00007FF6485E88A0]\nE       \t(No symbol) [0x00007FF6484791CA]\nE       \t(No symbol) [0x00007FF648451753]\nE       \t(No symbol) [0x00007FF6484FF83E]\nE       \t(No symbol) [0x00007FF64851FBE2]\nE       \t(No symbol) [0x00007FF6484F7A03]\nE       \t(No symbol) [0x00007FF6484C06D0]\nE       \t(No symbol) [0x00007FF6484C1983]\nE       \tGetHandleVerifier [0x00007FF6489E67CD+3579853]\nE       \tGetHandleVerifier [0x00007FF6489FD1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF6489F2153+3627347]\nE       \tGetHandleVerifier [0x00007FF64875092A+868650]\nE       \t(No symbol) [0x00007FF6485F2FFF]\nE       \t(No symbol) [0x00007FF6485EF4A4]\nE       \t(No symbol) [0x00007FF6485EF646]\nE       \t(No symbol) [0x00007FF6485DEAA9]\nE       \tBaseThreadInitThunk [0x00007FF94DAEE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF94EDD14FC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "90c3e5e0-6b9d-4305-9500-4cc16f8afaeb-attachment.txt", "type": "text/plain"}], "start": 1744708050611, "stop": 1744708052628, "uuid": "a18fb564-9112-4ec9-ae92-087f4e996942", "historyId": "5fe645680d326c0c3fba127d8e249ca1", "testCaseId": "5fe645680d326c0c3fba127d8e249ca1", "fullName": "test_search.Test_005_Search_Functionality#test_search_functionality_003", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "Test_005_Search_Functionality"}, {"name": "host", "value": "lukesh"}, {"name": "thread", "value": "15628-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_search"}]}